Module RAGatherAnyMushroom;

RegionalActivity RAGatherAnyMushroom<"Gather Mushrooms">;
subroutine GetTaskDescription(region) of RAGatherAnyMushroom { 
	if (IsA(World.RQSpecificActivityType[region, RAGatherAnyMushroom], ATFirst)) {
		return (String("First House to gather enough Mushrooms of any type"));
	}
	if (IsA(World.RQSpecificActivityType[region, RAGatherAnyMushroom], ATHouse)) {
		return (String("House to gather the most Mushrooms of any type"));
	}
	if (IsA(World.RQSpecificActivityType[region, RAGatherAnyMushroom], ATCoop)) {
		return (String("Gather enough Mushrooms of any type"));
	}

	return ("Unknown Objective [RAGatherAnyMushroom]");
}

subroutine PickAsActivity(region) of RAGatherAnyMushroom { 
	var result = TRTwister(0, 1);
	if (result) {
		var choice = TRTwister(1, 9);
		if (choice <= 3) {
			PostAssign(World.RQSpecificActivityType[region, RAGatherAnyMushroom], ATFirst);
			PostAssign(World.RQWeeklyMax[region, RAGatherAnyMushroom], TRTwister(1, 50) * 10);
		} else if (choice <= 6) {
			PostAssign(World.RQSpecificActivityType[region, RAGatherAnyMushroom], ATHouse);
			PostAssign(World.RQWeeklyMax[region, RAGatherAnyMushroom], -1);
		} else {
			PostAssign(World.RQSpecificActivityType[region, RAGatherAnyMushroom], ATCoop);
			PostAssign(World.RQWeeklyMax[region, RAGatherAnyMushroom], TRTwister(1, 50) * 10);
		}
	}
	return (result);
}

subroutine TriggerActivity(amount, extraData) of RAGatherAnyMushroom {
	if (!Actor.TemptationJoinTime) { return(); }
	var region = Actor->GetCurrentRegion();

	if (contains(World.HouseHomeRegions[Actor.House], region)) {
		amount = amount * 2;
	}

	Actor.RAActivityBuffer[RAGatherAnyMushroom, region, Actor.House] += amount;
}
