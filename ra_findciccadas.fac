Module RAFindCicadas;

RegionalActivity RAFindCicadas<"Find Cicadas">;

default World.RQSpecificActivitySettingMin[*, RAFindCicadas] = 1;
default World.RQSpecificActivitySettingMax[*, RAFindCicadas] = 10;

subroutine GetTaskDescription(region) of RAFindCicadas {
	if (IsA(World.RQSpecificActivityType[region, RAFindCicadas], ATFirst)) {
		return (String("First House to take enough Cicadas"));
	}
	if (IsA(World.RQSpecificActivityType[region, RAFindCicadas], ATHouse)) {
		return (String("House to gather the most Cicadas"));
	}
	if (IsA(World.RQSpecificActivityType[region, RAFindCicadas], ATCoop)) {
		return (String("Gather enough Cicada"));
	}

	return ("Unknown Objective [RAFindCicadas]");
}

subroutine PickAsActivity(region) of RAFindCicadas { 
	--Only allow a yes if test is open
	if (contains(World.TestActive,Cicada)) {
		var result = TRTwister(0, 1);
		if (result) {
			var choice = TRTwister(1, 9);
			if (choice <= 3) {
				PostAssign(World.RQSpecificActivityType[region, RAFindCicadas], ATFirst);
				PostAssign(World.RQWeeklyMax[region, RAFindCicadas], TRTwister(World.RQSpecificActivitySettingMin[region, RAFindCicadas], World.RQSpecificActivitySettingMax[region, RAFindCicadas]) * 10);
			} else if (choice <= 6) {
				PostAssign(World.RQSpecificActivityType[region, RAFindCicadas], ATHouse);
				PostAssign(World.RQWeeklyMax[region, RAFindCicadas], -1);
			} else {
				PostAssign(World.RQSpecificActivityType[region, RAFindCicadas], ATCoop);
				PostAssign(World.RQWeeklyMax[region, RAFindCicadas], TRTwister(World.RQSpecificActivitySettingMin[region, RAFindCicadas], World.RQSpecificActivitySettingMax[region, RAFindCicadas]) * 10);
			}
		}
		return (result);
	}
	return (0);
}

subroutine TriggerActivity(amount, extraData) of RAFindCicadas {
	var region = Actor->GetCurrentRegion();

	if (contains(World.HouseHomeRegions[Actor.House], region)) {
		amount = amount * 2;
	}

	Actor.RAActivityBuffer[RAFindCicadas, region, Actor.House] += amount;
}