Module RAGatherMushroom;

RegionalActivity RAGatherMushroom<"Gather [type] Mushrooms">;

default World.RQSpecificActivitySettingMin[*, RAGatherMushroom] = 1;
default World.RQSpecificActivitySettingMax[*, RAGatherMushroom] = 40;

subroutine GetTaskDescription(region) of RAGatherMushroom {
	if (IsA(World.RQSpecificActivityType[region, RAGatherMushroom], ATFirst)) {
		return (String("First House to gather enough ", World.RQSpecificActivitySetting[region, RAGatherMushroom]));
	}
	if (IsA(World.RQSpecificActivityType[region, RAGatherMushroom], ATHouse)) {
		return (String("House to gather the most ", World.RQSpecificActivitySetting[region, RAGatherMushroom]));
	}
	if (IsA(World.RQSpecificActivityType[region, RAGatherMushroom], ATCoop)) {
		return (String("Gather enough ", World.RQSpecificActivitySetting[region, RAGatherMushroom]));
	}

	return ("Unknown Objective [RAGatherMushroom]");
}

subroutine PickAsActivity(region) of RAGatherMushroom { 
	var result = TRTwister(0, 1);
	if (result) {
		var shrooms = <<>>;
		for shroom derivedfinal(Mushroom) {
			shrooms = append(shrooms, shroom);
		}

		var kind = nth(shrooms, TRTwister(0, length(shrooms)-1));
		PostAssign(World.RQSpecificActivitySetting[region, RAGatherMushroom], kind);

		var choice = TRTwister(1, 9);
		if (choice <= 3) {
			PostAssign(World.RQSpecificActivityType[region, RAGatherMushroom], ATFirst);
			PostAssign(World.RQWeeklyMax[region, RAGatherMushroom], TRTwister(World.RQSpecificActivitySettingMin[region, RAGatherMushroom], World.RQSpecificActivitySettingMax[region, RAGatherMushroom]) * 10);
		} else if (choice <= 6) {
			PostAssign(World.RQSpecificActivityType[region, RAGatherMushroom], ATHouse);
			PostAssign(World.RQWeeklyMax[region, RAGatherMushroom], -1);
		} else {
			PostAssign(World.RQSpecificActivityType[region, RAGatherMushroom], ATCoop);
			PostAssign(World.RQWeeklyMax[region, RAGatherMushroom], TRTwister(World.RQSpecificActivitySettingMin[region, RAGatherMushroom], World.RQSpecificActivitySettingMax[region, RAGatherMushroom]) * 10);
		}
	}
	return (result);
}

subroutine TriggerActivity(amount, extraData) of RAGatherMushroom {
	if (IsA(World.RQSpecificActivitySetting[Actor->GetCurrentRegion(), RAGatherMushroom], extraData)) {
		var region = Actor->GetCurrentRegion();

		if (contains(World.HouseHomeRegions[Actor.House], region)) {
			amount = amount * 2;
		}

		Actor.RAActivityBuffer[RAGatherMushroom, region, Actor.House] += amount;
	}
}